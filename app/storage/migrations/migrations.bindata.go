// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 1552456943_init.down.sql (104B)
// 1552456943_init.up.sql (2.114kB)
// 1553252079_add_amount_to_transfers.down.sql (130B)
// 1553252079_add_amount_to_transfers.up.sql (187B)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1552456943_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x29\x4a\xcc\x2b\x4e\x4b\x2d\x2a\xb6\xe6\xe5\xe2\xe5\xc2\xad\x24\x31\xb9\x24\x33\x3f\x0f\x8f\xaa\xf2\xc4\x9c\x9c\xd4\x12\x90\x02\x40\x00\x00\x00\xff\xff\x57\xc8\xb4\x9f\x68\x00\x00\x00")

func _1552456943_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1552456943_initDownSql,
		"1552456943_init.down.sql",
	)
}

func _1552456943_initDownSql() (*asset, error) {
	bytes, err := _1552456943_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1552456943_init.down.sql", size: 104, mode: os.FileMode(438), modTime: time.Unix(1553175630, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x98, 0xd8, 0xe8, 0xcd, 0xf, 0x2, 0xb6, 0x23, 0x12, 0x37, 0x2, 0xfd, 0xfc, 0x98, 0x1d, 0x51, 0x4a, 0x3c, 0xe3, 0x2e, 0x26, 0xb8, 0x1a, 0x74, 0x4f, 0xac, 0x20, 0xd0, 0x79, 0x46, 0xc, 0x98}}
	return a, nil
}

var __1552456943_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\xcb\x6e\xdb\x30\x10\xbc\x0b\xd0\x3f\xec\x2d\x0a\xd0\x7c\x41\x4f\x4a\xc3\xb4\x44\x6d\x39\xb5\x69\xd4\xe9\x85\x60\x2c\x26\x26\xaa\x87\x41\x52\xb5\xfb\xf7\x05\xa9\x17\x15\x2b\x95\xa5\xf8\x10\xdd\xbc\xdc\x19\x92\xb3\x33\xf4\x97\x25\x0a\x09\x02\x12\xde\xce\x10\xe0\x7b\x88\x16\x04\xd0\x06\xaf\xc8\x0a\x0e\x2c\x49\xb8\x56\xbe\x17\xf8\x1e\x80\x88\xa1\xfd\x08\xda\x10\x78\x58\xe2\x79\xb8\x7c\x84\xef\xe8\xf1\x93\xe9\x60\x71\x2c\xb9\x52\x4e\x47\xdf\x67\x36\x88\xd6\xb3\x19\xdc\xa1\xfb\x70\x3d\x23\x70\x75\x65\xd1\x2f\x3c\xe3\x92\x69\x1e\x53\xa6\x81\xe0\x39\x5a\x91\x70\xfe\x00\x3f\x31\xf9\x66\x7f\xc2\xaf\x45\x84\x4e\xd1\x59\x7e\x08\xae\x2d\xc1\x56\xf2\x1a\x0e\x93\x08\x8a\x7d\x3c\x4c\x60\x3b\x63\x9e\xf0\xc1\x4e\xdf\xbb\xfe\xec\x7b\xbe\x57\x29\xbc\x8e\xf0\x8f\x35\x02\x1c\xdd\xa1\xcd\x2b\xa1\x0b\x71\xa4\x95\xd8\xb4\x16\x71\x11\xd5\xfa\x43\x50\xd5\x4a\xba\x9b\x1b\x87\xb4\x6f\x6c\x5a\xb2\x4c\xb1\xad\x16\x79\x76\xfe\xec\x9e\x92\x7c\xfb\x9b\x66\x45\xfa\xc4\x25\xdc\xe2\xaf\x38\x22\xb6\xbe\x63\x6a\xd7\x45\x56\xf7\x38\x6b\xa6\xfa\xef\x9e\x77\xd1\x63\x1c\xa1\x34\xd3\x85\x9a\x8a\x7e\x96\x79\xda\xa8\x69\xd0\xe5\x89\x72\xda\xda\xb4\xa9\xfe\x61\x49\xc1\xdd\x73\x96\xbd\x22\x6d\x4f\xef\x68\xf2\xc1\x8d\xd6\xe7\x30\x71\xa4\xae\x2d\xa8\x11\xc7\x58\xcc\x2d\x42\xe0\x4a\x66\x28\x47\x10\xea\xfc\x94\xae\xd5\x7a\x8c\x73\x9f\xb9\xec\xb5\xed\x5b\xce\xe5\x7a\x47\x6b\x20\x15\xb1\x33\xbe\xba\x58\xb9\xf0\x7d\x0e\x9a\x42\x90\xe5\xd9\x96\x3b\x7d\xa5\x87\xfe\x43\x50\x3e\x84\x4c\xd1\xbd\x14\x0d\x72\x70\xdb\x06\x95\x88\x54\xe8\x51\x7b\x75\x22\x36\xe5\x8a\xfa\x48\x4f\x9e\x08\xbb\x20\xd9\x81\xea\x23\x9c\x2e\xa4\x5c\x29\xf6\xf2\x8e\x67\xa1\x13\xbf\x4b\x24\x70\x54\x08\x2f\x93\x43\x63\x72\xea\x3a\xb7\x49\x8f\x59\x81\xe0\x95\xa9\xcf\x0c\xa3\x65\xed\x44\xbb\x64\x7b\x23\xd7\x03\xff\x48\x2d\xa5\x9d\x70\x97\xb2\x9a\xbb\x61\xfb\x17\x00\x00\xff\xff\xd8\x56\xae\x2c\x42\x08\x00\x00")

func _1552456943_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1552456943_initUpSql,
		"1552456943_init.up.sql",
	)
}

func _1552456943_initUpSql() (*asset, error) {
	bytes, err := _1552456943_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1552456943_init.up.sql", size: 2114, mode: os.FileMode(438), modTime: time.Unix(1553175630, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc1, 0x3d, 0x56, 0x41, 0xf1, 0x42, 0xb8, 0x7d, 0x4c, 0x4f, 0x68, 0xd0, 0xab, 0x4e, 0x21, 0x94, 0xbf, 0x4a, 0x95, 0xc9, 0xf7, 0xfd, 0x5a, 0x5d, 0x89, 0xd9, 0x7c, 0x86, 0xd, 0x52, 0xc3, 0x16}}
	return a, nil
}

var __1553252079_add_amount_to_transfersDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x29\x4a\xcc\x2b\x4e\x4b\x2d\x2a\xe6\xe5\x52\x50\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\xcc\xcd\x2f\xcd\x2b\xd1\xc1\xad\xa0\x24\x3f\x3e\x31\x25\xa5\x28\xb5\xb8\x18\x9f\xa2\xc4\x8a\x78\x88\x49\xd6\xbc\x5c\x80\x00\x00\x00\xff\xff\x52\x4a\x6f\x12\x82\x00\x00\x00")

func _1553252079_add_amount_to_transfersDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1553252079_add_amount_to_transfersDownSql,
		"1553252079_add_amount_to_transfers.down.sql",
	)
}

func _1553252079_add_amount_to_transfersDownSql() (*asset, error) {
	bytes, err := _1553252079_add_amount_to_transfersDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1553252079_add_amount_to_transfers.down.sql", size: 130, mode: os.FileMode(438), modTime: time.Unix(1553512901, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdb, 0xf6, 0x3c, 0x3c, 0x0, 0x56, 0xac, 0xc1, 0xf4, 0x98, 0x86, 0xdc, 0x1a, 0x3b, 0x44, 0xbc, 0x58, 0xc1, 0xcc, 0x62, 0x8e, 0x92, 0x6c, 0x2a, 0x17, 0x98, 0xbb, 0x42, 0xa0, 0x30, 0x5a, 0x48}}
	return a, nil
}

var __1553252079_add_amount_to_transfersUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x29\x4a\xcc\x2b\x4e\x4b\x2d\x2a\xe6\xe5\x52\x50\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\xf0\x74\x53\xf0\xf3\x0f\x51\x70\x8d\xf0\x0c\x0e\x09\x56\x48\xcc\xcd\x2f\xcd\x2b\x51\x08\x71\x8d\x08\x51\x70\x71\x75\x73\x0c\xf5\x09\x51\x50\x57\xd7\xc1\xab\xa7\x24\x3f\x3e\x31\x25\xa5\x28\xb5\xb8\x98\x44\x7d\x89\x15\xf1\xd8\xed\xb3\xe6\xe5\x02\x04\x00\x00\xff\xff\x39\x31\x90\x25\xbb\x00\x00\x00")

func _1553252079_add_amount_to_transfersUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1553252079_add_amount_to_transfersUpSql,
		"1553252079_add_amount_to_transfers.up.sql",
	)
}

func _1553252079_add_amount_to_transfersUpSql() (*asset, error) {
	bytes, err := _1553252079_add_amount_to_transfersUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1553252079_add_amount_to_transfers.up.sql", size: 187, mode: os.FileMode(438), modTime: time.Unix(1553512936, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3f, 0x51, 0xe2, 0xdb, 0x6a, 0xa, 0x12, 0xf, 0x74, 0x5, 0x7e, 0x77, 0x72, 0x7e, 0xef, 0xdc, 0xd9, 0x55, 0xc4, 0xb2, 0xf8, 0xf6, 0x35, 0xa0, 0x10, 0xf2, 0x6b, 0x3a, 0x3b, 0xd9, 0x1c, 0x37}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1552456943_init.down.sql": _1552456943_initDownSql,

	"1552456943_init.up.sql": _1552456943_initUpSql,

	"1553252079_add_amount_to_transfers.down.sql": _1553252079_add_amount_to_transfersDownSql,

	"1553252079_add_amount_to_transfers.up.sql": _1553252079_add_amount_to_transfersUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"1552456943_init.down.sql":                    &bintree{_1552456943_initDownSql, map[string]*bintree{}},
	"1552456943_init.up.sql":                      &bintree{_1552456943_initUpSql, map[string]*bintree{}},
	"1553252079_add_amount_to_transfers.down.sql": &bintree{_1553252079_add_amount_to_transfersDownSql, map[string]*bintree{}},
	"1553252079_add_amount_to_transfers.up.sql":   &bintree{_1553252079_add_amount_to_transfersUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
